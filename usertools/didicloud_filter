#!/bin/bash
# Tonghao Zhang <zhangtonghao@didichuxing.com>
#

dpdkport="dpdk1 dpdk2"
log_file="/tmp/filter.log"

## ERROR CODE
ERR_OVS_ERR1="1"	# 1. ovs-vsctl 运行出错
ERR_OVS_ERR2="2"	# 2. ovs-vsctl 不能获取pci

ERR_PCI_ERR1="5"	# 5. i40e pci 目录出错
ERR_PCI_ERR2="6"	# 6. 系统不存在i40e 网卡设备
ERR_PCI_ERR3="7"	# 7. i40e PF pci 目录出错
ERR_PCI_ERR4="8"	# 8. i40e PF 没有开启SRIO-V
ERR_PCI_ERR5="9"	# 9. i40e VF pci 目录出错
ERR_PCI_ERR6="10"	# 10. 不能获取VF pci 信息
ERR_PCI_ERR7="11"	# 11. ethtool add/del ERR
ERR_PCI_ERR8="12"	# 12. DPDK 端口pci 不归属i40e VF

ERR_ARG_ERR1=13		# 13. 参数个数错误
ERR_ARG_ERR2="14"	# 14  参数格式不正确

ERR_ETHTOOL_ERR1="15"	# 15. ethtool 添加规则失败 
ERR_ETHTOOL_ERR2="16"	# 16. 当前系统不存在任何ethtool 规则
ERR_ETHTOOL_ERR3="17"	# 17. 系统不存在要删除的规则


net_driver="/sys/bus/pci/drivers/i40e"


function log_info()
{
	local log_com=$1
	echo `date +"%Y-%m-%d-%H:%M:%S"`" "$log_com >> $log_file
}

function pf_device_name()
{
	echo $(ls $net_driver/$1/net)
}

function vf_id()
{
	local virtfn=$1
	echo ${virtfn:6}
}

function ethtool_cmd()
{
	local ops=$1
	local pf=$2
	local vf=$3
	local vni=$4
	local mac=$5

	((vf=$vf +1))
	vni=`printf "%.6x" $vni`
	userdef=0x8000000000${vni}

	if [ "$ops" == "add" ]; then
		log_info "ethtool -N $pf flow-type ether src $mac user-def $userdef action 0x${vf}00000000"

		r=`ethtool -N $pf flow-type ether src $mac user-def  0x8000000000${vni} action 0x${vf}00000000`
		[ $? -ne 0 ] && log_info "ethtool add the flow error:[$r]" && echo $ERR_ETHTOOL_ERR1 && return 1

	elif [ "$ops" == "del" ]; then
		rule_ids=`ethtool -n $pf | grep "Filter:" | awk '{print $2}'`
		[ "$rule_ids" == "" ] && log_info "Not list any rule via ethtool[no rule in the kernel.]" && echo $ERR_ETHTOOL_ERR2 && return 1

		for id in $rule_ids
		do
			t_mac=`ethtool -n $pf rule $id | grep "Src MAC addr:" | awk '{print $4}'`
			if [ "$t_mac" == "$mac" ];then
				t_userdef=`ethtool -n $pf rule $id | grep "User-defined:" | awk '{print $2}'`
				if [ "$t_userdef" == "$userdef" ]; then
					log_info "ethtool -N $pf delete $id(mac: $mac, vni: 0x$vni, pf: $pf)"

					r=`ethtool -N $pf delete $id`
					[ $? -ne 0 ] && log_info "ethtool del the flow error:[$r]" && return 1

					return 0
				fi
			fi

		done
		# not find rule while deleting
		log_info "Not find the rule while deleting: all rule_id[$rule_ids], mac[$mac], vni[0x$vni]"
		echo $ERR_ETHTOOL_ERR3 && return 1
	fi

	return 0
}

# pci + vni + mac
function pci_device_flow()
{
	local ops=$1
	local portpci=$2
	local request_vni=$3

	declare -u request_mac
	local request_mac=$4

	driver_com=$(ls $net_driver 2>&1)
	[ $? -ne 0 ] && log_info "can not get comment for $net_driver: [$driver_com]" && echo $ERR_PCI_ERR1 && return 1 


	pf_pcis=$(echo $driver_com | grep "0000:*")
	[ "$pf_pcis" == "" ] && log_info "can not parse dir $net_driver for pci:[$driver_com]" && echo $ERR_PCI_ERR2 && return 1

	for pf_pci in $pf_pcis
	do
		# check the net driver dir for pf pci.
		pf_com=$(ls $net_driver/$pf_pci 2>&1)
		[ $? -ne 0 ] && log_info "can not get comment for pf $pf_pci: [$pf_com]" && echo $ERR_PCI_ERR3 && return 1 

		# parse the virtfnX
		virtfnX=$(ls $net_driver/$pf_pci | grep "virtfn[0-9]")
		# [ "$virtfnX" == "" ] && log_info "can not get vf of pf $pf_pci: [$pf_com]" && echo $ERR_PCI_ERR4 && return 1

		for virtfn in $virtfnX
		do
			# check the vf dir.
			vf_com=$(ls -l $net_driver/$pf_pci/$virtfn 2>&1)
			[ $? -ne 0 ] && log_info "can not get comment for vf $virtfn: [$vf_com]" && echo $ERR_PCI_ERR5 && return 1 

			# get the vf pci.
			vfpci=$(echo $vf_com | awk '{print $11}' | awk -F '/' '{print $2}')

			if [[ $vfpci == 0000:* ]]; then
				if [ "$vfpci" == "$portpci" ];then
					pf=$(pf_device_name $pf_pci)
					vf=$(vf_id $virtfn)

					err=`ethtool_cmd $ops $pf $vf $request_vni $request_mac`
					[ $? -ne 0 ] && echo $ERR_PCI_ERR7 && return 1

					return 0
				fi
			else
				log_info "can not parse vf pci: [$vf_com]" && $ERR_PCI_ERR6 && return 1
			fi
		done
	done


	# not find
	echo $ERR_PCI_ERR8 && return 1
}

function ovs_dpdk_port_pci()
{
	interface=$1

	option=$(ovs-vsctl --timeout=10 --columns=options --no-headings list interface $interface 2>&1)
	[ $? -ne 0 ] && log_info "ovs-vsctl running failed: [$option]" && echo $ERR_OVS_ERR1 && return 1 

	pci=$(echo $option | awk -F '"' '{print $2}')
	[[ $pci == 0000:* ]] && log_info "ovs-vsctl get pci: $pci for interface $interface" && echo $pci && return 0

	log_info "ovs-vsctl can not get pci for interface $interface: [option: $option]" && echo $ERR_OVS_ERR2 && return 1
}

# vni + mac
function pci_do_flow()
{
	local ops=$1
	local vni=$2
	local mac=$3

	for port in $dpdkport
	do
		vfs_pci=`ovs_dpdk_port_pci $port`
		[ $? -ne 0 ] && echo "$vfs_pci" && return 1

		# pci + vni + mac
		err=`pci_device_flow $ops $vfs_pci $vni $mac`
		[ $? -ne 0 ] && echo "$err" && return 1
	done

	return 0
}


function check_args()
{
	local ops=$1
	local vni=$2
	local mac=$3

	if [ "$ops" == "add" -o "$ops" == "del" ]; then
		echo "$vni" | [ -n "`sed -n '/^[0-9][0-9]*$/p'`" ] && echo "$mac" | [ -n "`sed -n '/^[A-Fa-f0-9:][A-Fa-f0-9:]*$/p'`" ] && return 0
	fi

	log_info "arg err: arg [mac: $mac, vni: $vni, ops: $ops]"
	echo $ERR_ARG_ERR2 && return 1
}

## main
if [ "$#" -eq "3" ]; then
	__ops=$1
	__vni=$2
	__mac=$3

	err=`check_args $__ops $__vni $__mac`
	[ $? -ne 0 ] && exit $err

	# add/del + vni + mac
	err=`pci_do_flow $__ops $__vni $__mac`
	exit $err
else
	log_info "arg err: arg: [$*]"
	exit $ERR_ARG_ERR1
fi
